#!/bin/bash

usage() {
cat <<USAGE
usage: $0 options -- VARIABLE1=value1 ...

Script for building images with Foreman preinstalled using virt-builder and
bats suite on local libvirt host. The script also modifies dnsmasq
configuration and sends SIGHUP to refresh so the hostname is instantly
available. The root password is "redhat" but you should have your public
ssh key installed by default.

OPTIONS:
  --help | -h
        Show this message

  --name | -n
        Image name, default: $NAME

  --distro | -d
        Distribution base image for virt-builder, default: $DISTRO

  --force | -f
        Overwrite target image and VM if they exist

  --no-sudo
        Do not use sudo for building and running VM - you will need to
        set --image-dir accordingly too when running under regular user.

  --image-dir [path]
        Target images path
        Default: $IMAGEDIR

  --domain [domain]
        Domain suffix like "mycompany.com", default: $DOMAIN

  --hosts [file]
        Path to hosts file that is modified with FQDN/IP
        Default: $HOSTS

  --pub-key [key]
        Install this public ssh key
        Default: $PUBKEY

  --install-deps
        Install required dependencies

When using dnsmasq as a primary DNS local caching daemon, add this to your
configuration (e.g. /etc/dnsmasq.d/read-libvirt-hosts).

  addn-hosts=/var/lib/libvirt/dnsmasq/default.addnhosts

Example:

  fvb -n my-nightly-foreman -f
  fvb -n bz981123 -- "KOJI_BUILD=http://mykoji.blah/taskinfo?taskID=97281"

USAGE
}

NAME=nightly
DOMAIN=libvirt
DISTRO=centos-6
IMAGEDIR=/var/lib/libvirt/images
HOSTS=/var/lib/libvirt/dnsmasq/default.addnhosts
PUBKEY=$HOME/.ssh/id_rsa.pub
FORCE=0
SUDO=sudo

if ! options=$(getopt -o hfn:d: -l help,name:,distro:,pub-key:,install-deps,image-dir:,domain:,no-sudo,hosts: -- "$@"); then
  exit 1
fi

eval set -- $options

while [ $# -gt 0 ]; do
    case $1 in
    --name|-n) NAME="$2" ; shift ;;
    --distro|-d) DISTRO="$2" ; shift ;;
    --image-dir|-p) IMAGEDIR="$2" ; shift ;;
    --domain) DOMAIN="$2" ; shift ;;
    --hosts) HOSTS="$2" ; shift ;;
    --pub-key) PUBKEY="$2" ; shift ;;
    --install-deps) sudo yum -y install openssl virt-install libguestfs util-linux sudo ;;
    --no-sudo) SUDO='' ;;
    --force|-f) FORCE=1 ;;
    --help|-h) usage;  exit ;;
    (--) shift; break;;
    (-*) echo "$0: error - unrecognized option $1" 1>&2; exit 1;;
    (*) break;;
    esac
    shift
done

if [[ FORCE -eq 0 ]]; then
  if [[ -f ${IMAGE} ]]; then
    echo "Image $IMAGE exists, use --force Luke!"; exit 1
  fi
  if $SUDO virsh domstate $NAME >/dev/null 2>&1; then
    echo "Domain $NAME exists, use --force Luke!"; exit 1
  fi
fi

echo "Parsing extra arguments"
while [ $# -gt 0 ]; do
  echo "$1"; eval "$1"; shift
done

FQDN=${NAME}.${DOMAIN}
IMAGE=${IMAGEDIR}/$NAME.img
TMP_BOOTSCRIPT=$(mktemp)
TMP_SCRIPT=$(mktemp)
trap "rm -f $TMP_BOOTSCRIPT $TMP_SCRIPT" EXIT
MAC="52:54:01$(echo "$(hostname)${NAME}" | openssl dgst -md5 -binary | hexdump -e '/1 ":%02x"' -n 3)"

echo "Reading your public ssh key"
PUBLIC_KEY=$(cat $PUBKEY)

echo "Stopping and removing $NAME if exists"
$SUDO virsh destroy $NAME >/dev/null 2>&1
$SUDO virsh undefine $NAME >/dev/null 2>&1

cat <<EOFBS > $TMP_BOOTSCRIPT
#!/bin/sh
export KOJI_BUILD="$KOJI_BUILD"
export HOME=/root
cd \$HOME
set -x
type git || yum -y install git || apt-get -y install git
git clone https://github.com/sstephenson/bats.git && bats/install.sh /usr/local
git clone https://github.com/theforeman/foreman-bats.git && foreman-bats/install.sh /usr/local
git clone https://github.com/lzap/bin-public.git
export PATH=/usr/local/bin:/root/bin-public:\$PATH
[[ -n "\$KOJI_BUILD" ]] && fb-setup-koji.bats
fb-install-foreman.bats
EOFBS

cat <<EOFS > $TMP_SCRIPT
mkdir /root/.ssh
echo $PUBLIC_KEY > /root/.ssh/authorized_keys
chmod 700 /root/.ssh
chmod 600 /root/.ssh/authorized_keys
restorecon -R /root
EOFS

echo "Building new image based on $DISTRO"
$SUDO virt-builder $DISTRO \
  -o $IMAGE \
  --root-password password:redhat \
  --hostname $FQDN \
  --run $TMP_SCRIPT \
  --firstboot $TMP_BOOTSCRIPT \
  || exit 2

echo "Spawning new VM with MAC address $MAC"
$SUDO virt-install --import \
  --os-variant rhel6 \
  --name $NAME \
  --ram 2500 \
  --disk path=$IMAGE,format=raw,bus=virtio \
  --graphics spice \
  --noautoconsole \
  --network=default,mac=$MAC,model=virtio \
  --force \
  || exit 3
echo "First boot initiated and the VM is resizing drive"

# set hostname on the libvirt dns
echo "Waiting for IP address to show up"
i=0; until [ $i -ge 200 ] || IPADDR=$(arp -an | grep $MAC | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'); do
  i=$((i + 1)); sleep 1
done
echo "The new guest received $IPADDR"

echo "Setting dnsmasq for host $FQDN"
if grep "$FQDN" $HOSTS >/dev/null; then
  $SUDO sed -i "s/.*$FQDN.*/$IPADDR $FQDN/g" $HOSTS
else
  $SUDO bash -c "echo '$IPADDR $FQDN' >> $HOSTS"
fi

echo "Refreshing dnsmasq configuration"
$SUDO pkill -SIGHUP dnsmasq

echo "Done! Your guest networking should be up and running soon."
echo "Login and watch virt-sysprep-firstboot.log for progress."
echo "The link is https://$FQDN"
echo
type fortune >/dev/null && fortune

