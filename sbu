#!/bin/bash
#
# Send a scratchbuild from current directory.
#
# Usage: sbu [katello|fedora|brew|hostname] [dist-tag] [koji-tag]
#

[ -n "${VERBOSE:+y}" ] && set -x
export LC_ALL=C
TARGET=${1:-katello}
DIST=${2:-el6}
KOJI_TAG=${3:-foreman-nightly-rhel6}
SCL=${4:-ruby193}
SRCDIR=$(rpm --eval '%{_sourcedir}')

echo "sbu $TARGET $DIST $KOJI_TAG $SCL"

if [[ "$SCL" == "no" ]]; then
  echo "Building without SCL..."
  EXTRA_DEFINE="__nothing 1"
  EXTRA_SSH_COMMANDS=""
else
  echo "Building with SCL '$SCL'..."
  EXTRA_DEFINE="__nothing 1"
  EXTRA_DEFINE="scl $SCL"
  # yum-builddep does not work with SCL, as a workaround we install ruby193- packages
  EXTRA_SSH_COMMANDS="yum -y install $SCL-build $SCL-scldevel scl-utils-build $SCL-*"
fi

SPEC=$(ls *.spec | head -n1)
SPECDIR=$(pwd)
NAME=$(rpm -q --qf '%{NAME}\n' --specfile "$SPEC" | head -n1)
VERSION=$(rpm -q --qf '%{VERSION}\n' --specfile "$SPEC" | head -n1)
RELEASE=$(rpm -q --qf '%{RELEASE}\n' --specfile "$SPEC" | head -n1)
SOURCE0=$(spectool --list-files "$SPEC" | awk '{print $2}' | head -n1)
SOURCEDIR0=$(echo "$SOURCE0" | sed -E 's/.tar.(gz|bz2)//g')
[ ${DIST##.} = $DIST ] && DIST=.${DIST}

# build SRPM
if test -x $(git rev-parse --show-toplevel)/.git/sbu-sources/$NAME; then
  # building in git-annex based repository
  echo "Working on $NAME via external script"
  $(git rev-parse --show-toplevel)/.git/sbu-sources/$NAME
  SRPM=$(rpmbuild -bs $NAME.spec --define "dist $DIST" | tail -n1 | sed 's/^Wrote: //g')
elif spectool --list-files "$SPEC" | awk '{print $2}' | grep '^http'; then
  echo "Working on $SPEC ($SOURCE0)"
  # sources are remote - download them first
  pushd $SRCDIR >/dev/null
  echo "Copying and downloading sources..."
  for f in $(spectool --list-files "$SPECDIR/$SPEC" | awk '{print $2}'); do
    if [ -e "$SPECDIR/$f" ]; then
      cp -a ${VERBOSE:+-v} $SPECDIR/$f . >&2
    else
      echo $f
    fi
  done | xargs -n 1 -P 4 wget -c -N --no-check-certificate ${VERBOSE:=-q}
  popd >/dev/null
  SRPM=$(rpmbuild -bs $NAME.spec --define "dist $DIST" | tail -n1 | sed 's/^Wrote: //g')
else
  echo "Working on $SPEC ($SOURCE0/$SOURCEDIR0)"
  # sources are most likely part of the git repo
  echo "Creating source tarball from working dir..."
  TEMPDIR=$(mktemp -d)
  trap "rm -rf $TEMPDIR" EXIT
  mkdir $TEMPDIR/$SOURCEDIR0
  cp -Rad . $TEMPDIR/$SOURCEDIR0
  pushd $TEMPDIR >/dev/null
  for g in $(find . -name .gitignore); do
    (cd $(dirname $g) && rm -rf $(egrep -v '^#|^$' .gitignore))
  done
  rm -rf `find -name ".git*"`
  tar c $SOURCEDIR0 | gzip -8 > ~/rpmbuild/SOURCES/$SOURCE0
  cd $SOURCEDIR0
  SRPM=$(rpmbuild -bs $NAME.spec --define "dist $DIST" --define "$EXTRA_DEFINE" | tail -n1 | sed 's/^Wrote: //g')
  popd >/dev/null
fi

# submit the build
echo "Source RPM is $SRPM"
if [ "$TARGET" == "katello" -o "$TARGET" == "koji" ]; then
  kojikat build --scratch --wait $KOJI_TAG "$SRPM"
elif [ "$TARGET" == "katello-release" -o "$TARGET" == "koji-release" ]; then
  kojikat build --wait $KOJI_TAG "$SRPM"
elif [ "$TARGET" == "fedora" ]; then
  koji build --scratch --wait $KOJI_TAG "$SRPM"
elif [ "$TARGET" == "fedora-release" ]; then
  koji build --wait $KOJI_TAG "$SRPM"
elif [ "$TARGET" == "brew" ]; then
  brew build --scratch --wait $KOJI_TAG "$SRPM"
elif [ "$TARGET" == "mock" ]; then
  mock "$SRPM"
else
  # local build on a hostname
  echo "Copying the source rpm to $TARGET"
  scp "$SRPM" "$TARGET:"
  SRPM_FILE=$(basename $SRPM)
  ssh -C "$TARGET" <<EOF
  RPMBUILD=~/rpmbuild
  echo Building $SRPM_FILE in \$RPMBUILD
  if [ -f "$SRPM_FILE" ]; then
    # install build essentials
    type -P gcc >/dev/null || yes | yum groupinstall "Development Tools"

    # install SCL on el6
    $EXTRA_SSH_COMMANDS

    # prepare and clean whole rpmbuild dir
    [ -d /usr/src/redhat/RPMS ] && RPMBUILD=/usr/src/redhat
    [ ! -x /usr/bin/rpmbuild -o ! -x /usr/bin/yum-builddep ] && yum -y install rpm-build yum-utils
    rm -rf \$RPMBUILD/*/*

    # install build deps and build (NOT using mock)
    yes | yum-builddep "$SRPM_FILE"
    rpmbuild --rmsource --rmspec --rebuild "$SRPM_FILE" $2 $3 $4

    # remove headpin (we are testing only against katello)
    #rm -f \$RPMBUILD/*/*/*headpin*rpm

    # if fedora-review is enabled, do it now
    #type -P fedora-review >/dev/null || yum -y install fedora-review
    #fedora-review -n "$NAME" -r -p

    # install packages and if that fails try to --force it
    echo INSTALLING:
    ls \$RPMBUILD/*/*/*rpm
    # TODO - yum returns 0 on 'does not update installed package' error
    yum localinstall -y --nogpgcheck \$RPMBUILD/*/*/*rpm
    rpm -Uvh --oldpackage --force \$RPMBUILD/*/*/*rpm 2>&1
    echo DONE
  fi
EOF
fi
